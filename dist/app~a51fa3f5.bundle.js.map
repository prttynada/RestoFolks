{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";0YACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAGA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC3D,IAoCF,QAjCyB,CACjBC,SAAQ,SAACC,GAAI,oGACZA,EAAI,CAAF,gEAIOP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CALjC,EAMnB,EACME,aAAY,WAAG,iHACLT,EAAS,uCAAEU,OAAOX,IAAiB,0CAD9B,EAErB,EACMY,SAAQ,SAACC,GAAY,oGAEpBA,EAAWC,eAAe,MAAO,CAAF,gEAItBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAU,0CANjC,EAO3B,EACMG,YAAW,SAACR,GAAI,iHACNP,EAAS,8CAASD,EAAmBQ,IAAE,0CADjC,EAEtB,EACMS,aAAY,SAACC,GAAO,4HACV,EAAKR,eAAc,uCAAES,QAAO,SAACN,GACzC,IACMO,GADyBP,EAAWQ,MAAQ,KAAKC,cACRC,QAAQ,MAAO,IAExDC,EADmBN,EAAMI,cACMC,QAAQ,MAAO,IACpD,OAAkD,IAA3CH,EAAiBK,QAAQD,EAClC,KAAC,0CAPuB,EAQ1B,gDCnCF,QALqB,CACnBE,WAAY,GAAF,OAAK5B,EAAAA,EAAAA,SAAe,QAC9B6B,OAAQ,SAACnB,GAAE,gBAAQV,EAAAA,EAAAA,SAAe,kBAAUU,EAAE,sPCHhD,4wNAkBA,QAjBiB,yBADjB,4FACiB,SADjB,QAQG,EAPc,EAcd,OAfH,EACiB,OADjB,EACiB,wCACf,sGACyBoB,MAAMC,EAAAA,WAAyB,CACpDC,OAAQ,QACR,OAFY,OAARC,EAAW,EAAH,cAGaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAChC,qFAED,WAAyB1B,GAAE,uFACFoB,MAAMC,EAAAA,OAAoBrB,GAAK,CACpDsB,OAAQ,QACR,OAFY,OAARC,EAAW,EAAH,uBAGPA,EAASC,QAAM,2CACvB,+CAfH,6DAeG,EAdc,mCCOjB,QATe,CACbG,SAAU,uCACVC,eAAgB,qDAChBC,YAAY,IAAIC,MAAOC,cACvB1C,cAAe,uBACfE,iBAAkB,EAClBC,kBAAmB,yECIfwC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,SAC/BC,OAAQF,SAASC,cAAc,WAC/BE,QAASH,SAASC,cAAc,kBAGlCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACN,IAEAF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-resto-idb.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoints.js","webpack://restaurant-apps/./src/scripts/data/restaurant-source.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["/* eslint-disable consistent-return */\r\nimport { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n  },\r\n});\r\n\r\nconst FavoriteRestoIdb = {\r\n  async getResto(id) {\r\n    if (!id) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n  async getAllRestos() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n  async putResto(restaurant) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (!restaurant.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n  },\r\n  async deleteResto(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n  async searchRestos(query) {\r\n    return (await this.getAllRestos()).filter((restaurant) => {\r\n      const loweredCaseRestoTitle = (restaurant.name || '-').toLowerCase();\r\n      const jammedRestoTitle = loweredCaseRestoTitle.replace(/\\s/g, '');\r\n      const loweredCaseQuery = query.toLowerCase();\r\n      const jammedQuery = loweredCaseQuery.replace(/\\s/g, '');\r\n      return jammedRestoTitle.indexOf(jammedQuery) !== -1;\r\n    });\r\n  },\r\n};\r\n\r\nexport default FavoriteRestoIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  RESTO_LIST: `${CONFIG.BASE_URL}list`,\r\n  DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoints';\r\n\r\nclass RestoSource {\r\n  static async resto_List() {\r\n    const response = await fetch(API_ENDPOINT.RESTO_LIST, {\r\n      method: 'GET',\r\n    });\r\n    const responseJson = await response.json();\r\n    return responseJson.restaurants;\r\n  }\r\n\r\n  static async detailResto(id) {\r\n    const response = await fetch(API_ENDPOINT.DETAIL(id), {\r\n      method: 'GET',\r\n    });\r\n    return response.json();\r\n  }\r\n}\r\n\r\nexport default RestoSource;\r\n","const CONFIG = {\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/medium/',\r\n  CACHE_NAME: new Date().toISOString(),\r\n  DATABASE_NAME: 'resto-folks-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurants',\r\n};\r\n\r\nexport default CONFIG;\r\n","/* eslint-disable no-unused-vars */\nimport 'regenerator-runtime'; /* for async await transpile */\nimport '../styles/style.css';\nimport '../styles/responsive.css';\nimport App from './views/app';\nimport swRegister from './utils/sw-register';\n\nconst START = 10;\nconst NUMBER_OF_IMAGES = 100;\n\nconst app = new App({\n  button: document.querySelector('#menu'),\n  drawer: document.querySelector('#drawer'),\n  content: document.querySelector('#maincontent'),\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getResto","id","get","getAllRestos","getAll","putResto","restaurant","hasOwnProperty","put","deleteResto","searchRestos","query","filter","jammedRestoTitle","name","toLowerCase","replace","jammedQuery","indexOf","RESTO_LIST","DETAIL","fetch","API_ENDPOINT","method","response","json","responseJson","restaurants","BASE_URL","BASE_IMAGE_URL","CACHE_NAME","Date","toISOString","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}